# -*- coding: utf-8 -*-
"""Metrics

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BNfxnNVRpafgCDxjw8LVh6xIA-RVSUmU
"""

import csv

def read_market_data(filename):
    market_data = {}
    with open(filename, 'r') as file:
        reader = csv.reader(file)
        headers = next(reader)
        for row in reader:
            for i, ticker in enumerate(headers[1:]):
                if ticker not in market_data:
                    market_data[ticker] = []
                market_data[ticker].append(float(row[i+1]))
    return market_data

def calculate_returns(prices):
    returns = [(prices[i] - prices[i-1]) / prices[i-1] for i in range(1, len(prices))]
    return returns

def write_returns_to_csv(returns_data, output_file):
    tickers = list(returns_data.keys())
    num_periods = len(returns_data[tickers[0]])

    with open(output_file, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['Date'] + tickers)
        for i in range(num_periods):
            row = [i+1] + [f"{returns_data[ticker][i]:.6f}" for ticker in tickers]
            writer.writerow(row)

def main():
    market_data = read_market_data('market.csv')
    returns_data = {ticker: calculate_returns(prices) for ticker, prices in market_data.items()}
    write_returns_to_csv(returns_data, 'returns.csv')

if __name__ == '__main__':
    main()

import csv
import sys
import numpy as np
from typing import Dict, List, Tuple, Optional
from pathlib import Path
import argparse
import warnings

# Deprecated decorator for extra credit
def deprecate(msg: str):
    def decorator(func):
        def wrapper(*args, **kwargs):
            warnings.warn(f"UserWarning: {msg}", category=UserWarning)
            return func(*args, **kwargs)
        return wrapper
    return decorator

@deprecate(msg="covar_np should be used instead as it is more performant!")
def covar(xs: List[float], ys: List[float]) -> float:
    return np.cov(xs, ys)[0, 1]

def read_returns(file_path: str) -> Dict[str, np.ndarray]:
    try:
        data = np.genfromtxt(file_path, delimiter=',', names=True, dtype=None, encoding='utf-8')
        return {col: data[col] for col in data.dtype.names[1:]}  # Exclude the date column
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
        sys.exit(1)

def calculate_returns(prices: np.ndarray) -> np.ndarray:
    return np.diff(prices) / prices[:-1]

def calculate_metrics(returns: np.ndarray, market_returns: np.ndarray) -> Tuple[float, float, float, float]:
    avg_return = np.mean(returns)
    return_volatility = np.std(returns)
    beta, alpha = np.polyfit(market_returns, returns, 1)
    return avg_return, return_volatility, alpha, beta

def write_metrics_to_csv(metrics: Dict[str, Tuple[float, float, float, float]], output_file: str) -> None:
    try:
        with open(output_file, 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['Ticker', 'Average Return', 'Return Volatility', 'Alpha', 'Beta'])
            for ticker, values in metrics.items():
                writer.writerow([ticker] + [f"{val:.4f}" for val in values])
    except Exception as e:
        print(f"Error writing to '{output_file}': {e}")
        sys.exit(1)

def main(data_path: str, ticker_filter: Optional[str] = None, output_path: Optional[str] = None) -> None:
    returns_data = read_returns(data_path)

    if ticker_filter and ticker_filter not in returns_data:
        print(f"Error: Ticker '{ticker_filter}' not found in data.")
        sys.exit(1)

    market_returns = calculate_returns(returns_data['^GSPC'])
    metrics = {}

    tickers = [ticker_filter] if ticker_filter else returns_data.keys()
    for ticker in tickers:
        if ticker != '^GSPC':
            stock_returns = calculate_returns(returns_data[ticker])
            metrics[ticker] = calculate_metrics(stock_returns, market_returns)

    if output_path:
        write_metrics_to_csv(metrics, output_path)
    else:
        for ticker, values in metrics.items():
            print(f"{ticker}: Avg Return={values[0]:.4f}, Volatility={values[1]:.4f}, Alpha={values[2]:.4f}, Beta={values[3]:.4f}")

if __name__ == '__main__':
    data_path = input("Enter the full path to the input data file: ")
    ticker_filter = input("Enter ticker filter (or leave blank for all): ")
    output_path = input("Enter output file path for metrics (or leave blank to print to console): ")

    main(data_path=data_path, ticker_filter=ticker_filter or None, output_path=output_path or None)